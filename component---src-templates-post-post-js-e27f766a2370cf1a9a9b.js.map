{"version":3,"sources":["webpack:///./src/components/Comment/index.js","webpack:///./src/templates/post/post.js","webpack:///./src/templates/post/post.module.less"],"names":["Comments","pageCanonicalUrl","pageId","page","useEffect","d","s","window","DISQUS","reset","reload","config","url","identifier","disqus_config","document","createElement","src","Config","disqusScript","setAttribute","Date","head","body","appendChild","id","Post","data","markdownRemark","html","frontmatter","title","fluid","cover","childImageSharp","excerpt","path","canonicalUrl","Utils","resolvePageUrl","siteUrl","pathPrefix","className","description","keywords","Header","Sidebar","style","bannerImgContainer","bannerImg","alt","blogArticle","dangerouslySetInnerHTML","__html","Comment","module","exports"],"mappings":"0MA0CeA,EAtCE,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,iBAAkBC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,KAyB5C,OAxBAC,qBAAU,WAcL,IACOC,EACAC,EAfNC,OAAOC,OACTD,OAAOC,OAAOC,MAAM,CAClBC,QAAQ,EACRC,OAFkB,WAGhBR,EAAKS,IAAMX,EACXE,EAAKU,WAAaX,MAItBK,OAAOO,cAAgB,WACrBX,EAAKS,IAAMX,EACXE,EAAKU,WAAaX,GAGZG,EAAIU,UACJT,EAAID,EAAEW,cAAc,WACxBC,IAAMC,IAAOC,aACfb,EAAEc,aAAa,kBAAmB,IAAIC,OACpChB,EAAEiB,MAAQjB,EAAEkB,MAAMC,YAAYlB,MAGnC,IAGD,6BACE,yBAAKmB,GAAG,oB,0FCiGCC,UAjHF,SAAC,GAIP,IAAD,IAHJC,KACEC,eAAkBC,EAEhB,EAFgBA,KAAMC,EAEtB,EAFsBA,YAIxBC,EAMED,EANFC,MAEqBC,EAInBF,EALFG,MACEC,gBAAmBF,MAErBG,EAEEL,EAFFK,QACAC,EACEN,EADFM,KAGIC,EAAeC,IAAMC,eACzBrB,IAAOsB,QACPtB,IAAOuB,WACPL,GAEF,OACE,uBAAQM,UAAU,gBAChB,uBAAQA,UAAU,aAChB,kBAAC,IAAD,CACEX,MAAOA,EACPY,YAAaR,EACbC,KAAMA,EACNQ,SAAU,CACR,SACA,SACA,WACA,sBACA,aACA,UACA,SACA,SACA,gBAGJ,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,KACE,yBAAKJ,UAAU,kBACb,4BAAKX,GACL,yBAAKW,UAAWK,IAAMC,oBACpB,kBAAC,IAAD,CACEN,UAAWK,IAAME,UACjBjB,MAAOA,EACPD,MAAOI,EACPe,IAAKnB,KAGT,6BACEW,UAAWK,IAAMI,YACjBC,wBAAyB,CAAEC,OAAQxB,KAErC,kBAACyB,EAAD,CAASrD,iBAAkBoC,EAAcnC,OAAQ6B,U,8CCpE7DwB,EAAOC,QAAU,CAAC,mBAAqB,yCAAyC,UAAY,gCAAgC,YAAc,oC","file":"component---src-templates-post-post-js-e27f766a2370cf1a9a9b.js","sourcesContent":["import PropTypes from 'prop-types'\nimport React, { useEffect } from 'react'\nimport Config from '../../../config'\n\nconst Comments = ({ pageCanonicalUrl, pageId, page }) => {\n  useEffect(() => {\n    if (window.DISQUS) {\n      window.DISQUS.reset({\n        reload: true,\n        config() {\n          page.url = pageCanonicalUrl\n          page.identifier = pageId\n        },\n      })\n    } else {\n      window.disqus_config = () => {\n        page.url = pageCanonicalUrl\n        page.identifier = pageId\n      }\n      ;(() => {\n        const d = document\n        const s = d.createElement('script')\n        s.src = Config.disqusScript\n        s.setAttribute('data-timestamp', +new Date())\n        ;(d.head || d.body).appendChild(s)\n      })()\n    }\n  }, [])\n\n  return (\n    <div>\n      <div id=\"disqus_thread\" />\n    </div>\n  )\n}\n\nComments.propTypes = {\n  pageCanonicalUrl: PropTypes.string.isRequired,\n  pageId: PropTypes.string.isRequired,\n  page: PropTypes.any,\n}\n\nexport default Comments\n","import { Layout } from 'antd'\nimport { graphql } from 'gatsby'\nimport Img from 'gatsby-image'\nimport 'prismjs/themes/prism-solarizedlight.css'\nimport PropTypes from 'prop-types'\nimport React from 'react'\nimport Config from '../../../config'\nimport Comment from '../../components/Comment'\nimport Header from '../../components/PageLayout/Header'\nimport SidebarWrapper from '../../components/PageLayout/Sidebar'\nimport SEO from '../../components/Seo'\nimport Utils from '../../utils/pageUtils'\nimport './highlight-syntax.less'\nimport style from './post.module.less'\n\nconst Post = ({\n  data: {\n    markdownRemark: { html, frontmatter },\n  },\n}) => {\n  const {\n    title,\n    cover: {\n      childImageSharp: { fluid },\n    },\n    excerpt,\n    path,\n  } = frontmatter\n\n  const canonicalUrl = Utils.resolvePageUrl(\n    Config.siteUrl,\n    Config.pathPrefix,\n    path\n  )\n  return (\n    <Layout className=\"outerPadding\">\n      <Layout className=\"container\">\n        <SEO\n          title={title}\n          description={excerpt}\n          path={path}\n          keywords={[\n            'Rolwin',\n            'Reevan',\n            'Monteiro',\n            'FullStack developer',\n            'Javascript',\n            'ReactJS',\n            'NodeJS',\n            'Gatsby',\n            'technology',\n          ]}\n        />\n        <Header />\n        <SidebarWrapper>\n          <div className=\"marginTopTitle\">\n            <h1>{title}</h1>\n            <div className={style.bannerImgContainer}>\n              <Img\n                className={style.bannerImg}\n                fluid={fluid}\n                title={excerpt}\n                alt={title}\n              />\n            </div>\n            <article\n              className={style.blogArticle}\n              dangerouslySetInnerHTML={{ __html: html }}\n            />\n            <Comment pageCanonicalUrl={canonicalUrl} pageId={title} />\n          </div>\n        </SidebarWrapper>\n      </Layout>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query($postPath: String!) {\n    markdownRemark(frontmatter: { path: { eq: $postPath } }) {\n      html\n      timeToRead\n      frontmatter {\n        title\n        date(formatString: \"DD MMM YYYY\")\n        tags\n        path\n        excerpt\n        cover {\n          childImageSharp {\n            fluid(maxWidth: 1000) {\n              ...GatsbyImageSharpFluid_tracedSVG\n            }\n          }\n        }\n      }\n    }\n    allMarkdownRemark(\n      filter: {\n        frontmatter: { path: { ne: $postPath } }\n        fileAbsolutePath: { regex: \"/index.md$/\" }\n      }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            path\n            title\n            tags\n            excerpt\n            cover {\n              childImageSharp {\n                fluid(maxWidth: 600) {\n                  ...GatsbyImageSharpFluid_tracedSVG\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nPost.propTypes = {\n  data: PropTypes.any,\n}\n\nexport default Post\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bannerImgContainer\":\"post-module--bannerImgContainer--3SopW\",\"bannerImg\":\"post-module--bannerImg--2yAgf\",\"blogArticle\":\"post-module--blogArticle--1Ro02\"};"],"sourceRoot":""}