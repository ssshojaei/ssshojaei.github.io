{"version":3,"sources":["webpack:///./src/templates/tags/tags.module.less","webpack:///./src/templates/tags/index.js"],"names":["module","exports","TagPage","data","tag","pageContext","tagName","Config","tags","name","Utils","capitalize","tagPagePath","pages","allFile","edges","find","edge","node","childImageSharp","fixed","fluid","posts","allMarkdownRemark","className","title","description","path","keywords","style","tagsList","bannerImgContainer","bannerImg","alt","gutter","map","post","key","xs","sm","md","lg"],"mappings":"+EACAA,EAAOC,QAAU,CAAC,SAAW,+BAA+B,mBAAqB,yCAAyC,UAAY,kC,4QC+HvHC,UAnHC,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KACTC,EADiC,EAAlBC,YACfD,IACFE,EAAUC,IAAOC,KAAKJ,GAAKK,MAAQC,IAAMC,WAAWP,GACpDQ,EAAcL,IAAOM,MAAMT,IACjC,EAAyBD,EAAKW,QAAQC,MAAMC,MAC1C,SAAAC,GAAI,OAAIA,EAAKC,KAAKT,OAASL,KAC3Bc,KAAKC,gBAFCC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,MAGTC,EAAQnB,EAAKoB,kBAAkBR,MAErC,OACE,uBAAQS,UAAU,gBAChB,uBAAQA,UAAU,aAChB,kBAAC,IAAD,MACA,kBAAC,IAAD,CACEC,MAAOnB,EACPoB,YAAW,gBAAkBpB,EAAlB,KAA8BC,IAAOC,KAAKJ,GAAKsB,YAA/C,IACXC,KAAI,IAAMf,EAAN,IAAqBR,EACzBwB,SAAU,CAACtB,KAEb,kBAAC,IAAD,KACE,yBAAKkB,UAAS,kBAAoBK,IAAMC,UACtC,gCAAMxB,GACN,yBAAKkB,UAAWK,IAAME,oBACpB,kBAAC,IAAD,CACEP,UAAWK,IAAMG,UACjBX,MAAOA,EACPD,MAAOA,EACPa,IAAK3B,KAGT,wBAAIkB,UAAU,cAAcjB,IAAOC,KAAKJ,GAAKsB,cAE/C,uBAAKQ,OAAQ,CAAC,GAAI,KACfZ,EAAMa,KAAI,SAACC,EAAMC,GAAP,OAET,uBAAKA,IAAKA,EAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GACzC,kBAAC,IAAD,CAAUtC,KAAMiC","file":"component---src-templates-tags-index-js-eea91cf556b63face790.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tagsList\":\"tags-module--tagsList--39vLn\",\"bannerImgContainer\":\"tags-module--bannerImgContainer--24LjU\",\"bannerImg\":\"tags-module--bannerImg--xzH6c\"};","import { Col, Layout, Row } from 'antd'\nimport { graphql } from 'gatsby'\nimport Img from 'gatsby-image'\nimport PropTypes from 'prop-types'\nimport React from 'react'\nimport Config from '../../../config'\nimport Header from '../../components/PageLayout/Header'\nimport SidebarWrapper from '../../components/PageLayout/Sidebar'\nimport PostCard from '../../components/PostCard'\nimport SEO from '../../components/Seo'\nimport Utils from '../../utils/pageUtils'\nimport style from './tags.module.less'\n\nconst TagPage = ({ data, pageContext }) => {\n  const { tag } = pageContext\n  const tagName = Config.tags[tag].name || Utils.capitalize(tag)\n  const tagPagePath = Config.pages.tag\n  const { fixed, fluid } = data.allFile.edges.find(\n    edge => edge.node.name === tag\n  ).node.childImageSharp\n  const posts = data.allMarkdownRemark.edges\n\n  return (\n    <Layout className=\"outerPadding\">\n      <Layout className=\"container\">\n        <Header />\n        <SEO\n          title={tagName}\n          description={`تمام پست‌های ${tagName}. ${Config.tags[tag].description} `}\n          path={`/${tagPagePath}/${tag}`}\n          keywords={[tagName]}\n        />\n        <SidebarWrapper>\n          <div className={`marginTopTitle ${style.tagsList}`}>\n            <h1>#{tagName}</h1>\n            <div className={style.bannerImgContainer}>\n              <Img\n                className={style.bannerImg}\n                fluid={fluid}\n                fixed={fixed}\n                alt={tagName}\n              />\n            </div>\n            <h4 className=\"textCenter\">{Config.tags[tag].description}</h4>\n          </div>\n          <Row gutter={[20, 20]}>\n            {posts.map((post, key) => (\n              // eslint-disable-next-line react/no-array-index-key\n              <Col key={key} xs={24} sm={24} md={12} lg={8}>\n                <PostCard data={post} />\n              </Col>\n            ))}\n          </Row>\n        </SidebarWrapper>\n      </Layout>\n    </Layout>\n  )\n}\n\nTagPage.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.arrayOf(PropTypes.object).isRequired,\n    }).isRequired,\n    allFile: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            name: PropTypes.string.isRequired,\n            childImageSharp: PropTypes.shape({\n              fluid: PropTypes.object.isRequired,\n            }).isRequired,\n          }).isRequired,\n        })\n      ).isRequired,\n    }).isRequired,\n  }).isRequired,\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport const pageQuery = graphql`\n  query($tag: String!) {\n    allMarkdownRemark(\n      filter: {\n        frontmatter: { tags: { in: [$tag] } }\n        fileAbsolutePath: { regex: \"/index.md$/\" }\n      }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n            tags\n            excerpt\n            cover {\n              childImageSharp {\n                fluid(maxWidth: 600) {\n                  ...GatsbyImageSharpFluid_tracedSVG\n                }\n                fixed {\n                  srcWebp\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    allFile(filter: { name: { eq: $tag }, dir: { regex: \"/tags$/\" } }) {\n      edges {\n        node {\n          name\n          childImageSharp {\n            fluid(maxHeight: 600) {\n              ...GatsbyImageSharpFluid_tracedSVG\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default TagPage\n"],"sourceRoot":""}