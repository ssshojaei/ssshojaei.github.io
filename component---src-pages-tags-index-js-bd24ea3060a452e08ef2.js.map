{"version":3,"sources":["webpack:///./src/components/TagCard/tags.module.less","webpack:///./src/components/TagCard/index.js","webpack:///./src/pages/tags/index.js"],"names":["module","exports","TagCard","img","name","link","description","color","tagPage","Config","pages","tag","className","style","tagCard","to","tagImg","backgroundImage","pd20px","Tags","edges","data","allFile","tagData","tags","Header","title","path","Sidebar","gutter","map","val","key","node","xs","sm","md","lg","childImageSharp","fluid","src"],"mappings":"iFACAA,EAAOC,QAAU,CAAC,QAAU,8BAA8B,OAAS,6BAA6B,OAAS,+B,kOCoC1FC,EA/BC,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,IAAKC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,MACzCC,EAAUC,IAAOC,MAAMC,IAE7B,OACE,kBAAC,OAAD,CAAMC,UAAWC,IAAMC,QAASC,GAAE,IAAMP,EAAN,IAAiBH,GACjD,yBAAKO,UAAWC,IAAMC,SACpB,yBACEF,UAAWC,IAAMG,OACjBH,MAAO,CACLI,gBAAgB,OAAQd,EAAT,OAGnB,yBAAKS,UAAWC,IAAMK,QACpB,yBAAKN,UAAU,cACb,wBAAIC,MAAO,CAAEN,MAAM,GAAIA,IAAvB,IAAoCH,IAEtC,2BAAIE,OCmFCa,UA/FF,SAAC,GAIP,IAFQC,EAET,EAHJC,KACEC,QAAWF,MAGPG,EAAUd,IAAOe,KAEvB,OACE,uBAAQZ,UAAU,gBAChB,uBAAQA,UAAU,aAChB,kBAACa,EAAA,EAAD,MACA,kBAAC,IAAD,CACEC,MAAM,UACNpB,YAAY,oCACZqB,KAAK,SAEP,kBAACC,EAAA,EAAD,KACE,oCACE,yBAAKhB,UAAU,kBACb,wBAAIA,UAAU,iBAAd,aAEF,uBAAKiB,OAAQ,CAAC,GAAI,KACfT,EAAMU,KAAI,SAAAC,GAAG,eACZ,uBAAKC,IAAKD,EAAIE,KAAK7B,KAAM8B,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GACnD,kBAAC,EAAD,CACElC,IAAK4B,EAAIE,KAAKK,gBAAgBC,MAAMC,IACpCnC,KAAM0B,EAAIE,KAAK7B,KACfA,KAAMmB,EAAQQ,EAAIE,KAAK7B,MAAMA,KAC7BE,YAAW,UAAEiB,EAAQQ,EAAIE,KAAK7B,aAAnB,aAAE,EAAwBE,YACrCC,MAAK,UAAEgB,EAAQQ,EAAIE,KAAK7B,aAAnB,aAAE,EAAwBG","file":"component---src-pages-tags-index-js-bd24ea3060a452e08ef2.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tagCard\":\"tags-module--tagCard--2sNqZ\",\"tagImg\":\"tags-module--tagImg--21WVr\",\"pd20px\":\"tags-module--pd20px--1m4en\"};","import { Link } from 'gatsby'\nimport PropTypes from 'prop-types'\nimport React from 'react'\nimport Config from '../../../config'\nimport style from './tags.module.less'\n\nconst TagCard = ({ img, name, link, description, color }) => {\n  const tagPage = Config.pages.tag\n\n  return (\n    <Link className={style.tagCard} to={`/${tagPage}/${link}`}>\n      <div className={style.tagCard}>\n        <div\n          className={style.tagImg}\n          style={{\n            backgroundImage: `url(${img})`,\n          }}\n        />\n        <div className={style.pd20px}>\n          <div className=\"textCenter\">\n            <h4 style={{ color: `${color}` }}>#{name}</h4>\n          </div>\n          <p>{description}</p>\n        </div>\n      </div>\n    </Link>\n  )\n}\n\nTagCard.propTypes = {\n  img: PropTypes.string,\n  name: PropTypes.string,\n  link: PropTypes.string,\n  description: PropTypes.string,\n  color: PropTypes.string,\n}\n\nexport default TagCard\n","import { Col, Layout, Row } from 'antd'\nimport { graphql } from 'gatsby'\nimport PropTypes from 'prop-types'\nimport React from 'react'\nimport Config from '../../../config'\nimport Header from '../../components/PageLayout/Header'\nimport SidebarWrapper from '../../components/PageLayout/Sidebar'\nimport SEO from '../../components/Seo'\nimport TagCard from '../../components/TagCard'\n\nconst Tags = ({\n  data: {\n    allFile: { edges },\n  },\n}) => {\n  const tagData = Config.tags\n\n  return (\n    <Layout className=\"outerPadding\">\n      <Layout className=\"container\">\n        <Header />\n        <SEO\n          title=\"دسته‌ها\"\n          description=\"دسته‌بندی های بلاگ سید صالح شجاعی\"\n          path=\"tags\"\n        />\n        <SidebarWrapper>\n          <>\n            <div className=\"marginTopTitle\">\n              <h1 className=\"titleSeparate\">#دسته‌ها</h1>\n            </div>\n            <Row gutter={[30, 20]}>\n              {edges.map(val => (\n                <Col key={val.node.name} xs={24} sm={24} md={12} lg={8}>\n                  <TagCard\n                    img={val.node.childImageSharp.fluid.src}\n                    link={val.node.name}\n                    name={tagData[val.node.name].name}\n                    description={tagData[val.node.name]?.description}\n                    color={tagData[val.node.name]?.color}\n                  />\n                </Col>\n              ))}\n            </Row>\n          </>\n        </SidebarWrapper>\n      </Layout>\n    </Layout>\n  )\n}\n\nTags.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              tags: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n            }).isRequired,\n          }).isRequired,\n        }).isRequired\n      ).isRequired,\n    }).isRequired,\n    allFile: PropTypes.shape({\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            name: PropTypes.string.isRequired,\n            childImageSharp: PropTypes.shape({\n              fluid: PropTypes.object.isRequired,\n            }).isRequired,\n          }).isRequired,\n        }).isRequired\n      ).isRequired,\n    }).isRequired,\n  }).isRequired,\n}\n\nexport const query = graphql`\n  {\n    allMarkdownRemark(filter: { fileAbsolutePath: { regex: \"/index.md$/\" } }) {\n      edges {\n        node {\n          frontmatter {\n            tags\n          }\n        }\n      }\n    }\n    allFile(filter: { relativeDirectory: { eq: \"tags\" } }) {\n      edges {\n        node {\n          name\n          childImageSharp {\n            fluid(maxWidth: 400) {\n              ...GatsbyImageSharpFluid_tracedSVG\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default Tags\n"],"sourceRoot":""}