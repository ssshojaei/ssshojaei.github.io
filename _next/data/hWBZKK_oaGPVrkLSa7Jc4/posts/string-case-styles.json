{"pageProps":{"post":{"title":"شیوه‌های نوشتن استرینگ","description":"معرفی Camel, Pascal, Snake, Kebab Case","date":"2021-06-28","slug":"string-case-styles","tags":["programming","introduce"],"content":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h2: \"h2\",\n    img: \"img\",\n    p: \"p\",\n    pre: \"pre\",\n    span: \"span\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"توی برنامه‌نویسی معمولا از فاصله (\\\" \\\") برای جدا کردن مفهومی کلمات استفاده نمیشه، زبان‌های برنامه‌نویسی برداشت دیگه‌ای دارن از این کاراکتر. بنابراین به جای فاصله\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsxs(_components.code, {\n        className: \"language-js\",\n        children: [_jsx(_components.span, {\n          className: \"hljs-keyword\",\n          children: \"const\"\n        }), \" user login count = \", _jsx(_components.span, {\n          className: \"hljs-number\",\n          children: \"3\"\n        }), \" \", _jsx(_components.span, {\n          className: \"hljs-comment\",\n          children: \"//Error\"\n        }), \"\\n\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"باید با روش دیگه‌ای کلمه‌ها رو از هم جدا کنیم. بریم و با هم با مرسوم‌ترین این استانداردها آشنا بشیم.\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"شتری-نویسی---camel-case\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#شتری-نویسی---camel-case\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"شتری نویسی - Camel Case:\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/posts/string-case-styles/CamelCase.jpg\",\n        alt: \"CamelCase\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"این روش از کوهان شترها الهام گرفته، دست کم برای نام‌گذاری...\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"توی camelCase، کلمات رو با حروف اول بزرگ از هم جدا میکنیم، بعد از اولین کلمه. به این صورت:\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"معمولی: \", _jsx(_components.code, {\n        children: \"user login count\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"کَمِل‌کیس: \", _jsx(_components.code, {\n        children: \"userLoginCount\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"این روش، مرسوم ترین روش هست و معمولا به عنوان یک قانون نوشته نشده، همه ازش استفاده میکنیم توی زبان‌های برنامه‌نویسی مختلف\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"پاسکال---pascal-case\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#پاسکال---pascal-case\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"پاسکال - Pascal Case:\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"این روش فاصله‌ها رو حذف میکنه و حرف اول تمام کلمات (حتی اولین کلمه) رو بزرگ میکنه.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"معمولی: \", _jsx(_components.code, {\n        children: \"user login count\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"پاسکال: \", _jsx(_components.code, {\n        children: \"UserLoginCount\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"در بسیاری از زبان‌ها از این روش برای تعریف کلاس‌ها استفاده میشه.\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"مار-گونه---snake-case\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#مار-گونه---snake-case\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"مار گونه - Snake Case:\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"\\\"به احترام رفیقم که فوبیای مار داره، از نمایش تصویر این گونه‌ی زیبا گذر می‌کنیم\\\"\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"این روش فاصله‌ها رو با underline \\\"_\\\" جایگزین میکنه و در حالت معمولی تمام حروف رو کوچیک میکنه ، در حال All Gaps همه‌ی حروف رو بزرگ میکنه\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"معمولی: \", _jsx(_components.code, {\n        children: \"user login count\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"مار گونه: \", _jsx(_components.code, {\n        children: \"user_login_count\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"مار گونه (All Gaps): \", _jsx(_components.code, {\n        children: \"USER_LOGIN_COUNT‍\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"از این روش هم توی زبان‌های زیادی استفاده میشه، از حالت Snake All Gaps معمولا برای تعریف ثابت‌ها استفاده میشه و از حالت معمولی هم بیشتر توی تعریف فیلد‌های دیتابیس استفاده میشه.\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"کبابی---kebab-case\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#کبابی---kebab-case\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"کبابی - Kebab Case:\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/posts/string-case-styles/KebabCase.jpg\",\n        alt: \"KebabCase\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"توی Kebab Case فاصله ها رو به dash (\\\"-\\\") یا خط فاصله جایگزین میکنیم\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"معمولی: \", _jsx(_components.code, {\n        children: \"user login count\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"کبابی: \", _jsx(_components.code, {\n        children: \"user-login-count\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"این روش بیشتر توی نوشتن URL ها استفاده میشه. مثل لینک پایین.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"https://roxaleh.ir/posts/useful-extensions-for-gnome-40\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"کدوم-روش-بهتره\",\n      children: [_jsx(_components.a, {\n        className: \"anchor\",\n        href: \"#کدوم-روش-بهتره\",\n        children: _jsx(_components.span, {\n          className: \"icon icon-link\"\n        })\n      }), \"کدوم روش بهتره؟\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"همشون/هیچ‌کدوم. همونطور که با هم دیدیم، هر کدوم برای جاهای خاصی کاربرد دارن و باید از هرکدوم توی جای درستش استفاده کنیم.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"و در انتها بگم که خودم از همشون استفاده میکردم توی جای خودش اما اسم‌هاشون رو نمیدونستم. با دیدن یه یوتیل توی پروژه‌ی تازه‌ای که روش کار میکنم به اسم convertToKebabCase کنجکاو شدم که کباب کیس چیست دیگر و گفتم که این رو با شما هم درمیون بذارم.\\nمنبع این پست:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"https://betterprogramming.pub/string-case-styles-camel-pascal-snake-and-kebab-case-981407998841\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"coverImage":"/posts/string-case-styles.jpg","timeToRead":10}},"__N_SSG":true}